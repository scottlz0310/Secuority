# pyproject.toml template for Secuority
# This template includes modern Python project configuration with security and quality tools

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ project_name }}"
version = "{{ project_version | default('0.1.0') }}"
description = "{{ project_description | default('') }}"
readme = "README.md"
license = {text = "{{ project_license | default('MIT') }}"}
authors = [
    {name = "{{ author_name | default('') }}", email = "{{ author_email | default('') }}"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
dependencies = [
    # Add your project dependencies here
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "{{ project_homepage | default('') }}"
Repository = "{{ project_repository | default('') }}"
Issues = "{{ project_issues | default('') }}"

# Ruff configuration for linting and formatting
[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit (security)
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "S101",  # use of assert (common in tests)
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106", "S108"]  # Allow assert and hardcoded passwords in tests

[tool.ruff.isort]
known-first-party = ["{{ package_name | default('your_package') }}"]

# Mypy configuration for type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Bandit configuration for security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Safety configuration for dependency vulnerability scanning
[tool.secuority.safety]
ignore = []  # Add CVE IDs to ignore specific vulnerabilities
full_report = true

# Coverage configuration
[tool.coverage.run]
source = ["{{ package_name | default('src') }}"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov={{ package_name | default('src') }}",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]