# GitHub Actions workflow for security checks
# Generated by Secuority - Python security and quality automation tool

name: Security Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: "0 2 * * *"

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13", "3.14"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better secret detection

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install security tools and dependencies
        run: |
          if [ -f "pyproject.toml" ]; then
            # Use uv sync to install all dependencies
            uv sync --all-extras || uv sync
          elif [ -f "requirements.txt" ]; then
            uv venv
            source .venv/bin/activate
            uv pip install -r requirements.txt
          else
            uv venv
            source .venv/bin/activate
          fi
          # Install security tools
          uv pip install bandit[toml] safety

      - name: Run Bandit security linter
        run: |
          uv run bandit -c pyproject.toml -r . -f json -o bandit-report.json || true
          uv run bandit -c pyproject.toml -r . -f txt

      - name: Run Safety dependency vulnerability scanner
        run: |
          uv run safety check --json --output safety-report.json || true
          uv run safety check

      - name: Run Gitleaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.GITHUB_PERSONAL_ACCESS_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Upload security reports to SARIF
        if: always()
        run: |
          if [ -f "bandit-report.json" ]; then
            uv run python << 'PYTHON_SCRIPT'
          import json

          try:
              with open("bandit-report.json", "r") as f:
                  bandit_data = json.load(f)

              sarif = {
                  "version": "2.1.0",
                  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                  "runs": [{
                      "tool": {
                          "driver": {
                              "name": "Bandit",
                              "version": "1.7.10",
                              "informationUri": "https://bandit.readthedocs.io/"
                          }
                      },
                      "results": [
                          {
                              "ruleId": result["test_id"],
                              "message": {"text": result["issue_text"]},
                              "level": "error" if result["issue_severity"] == "HIGH" else "warning",
                              "locations": [{
                                  "physicalLocation": {
                                      "artifactLocation": {"uri": result["filename"]},
                                      "region": {"startLine": result["line_number"]}
                                  }
                              }]
                          } for result in bandit_data.get("results", [])
                      ]
                  }]
              }

              with open("bandit.sarif", "w") as f:
                  json.dump(sarif, f, indent=2)
          except Exception as e:
              print(f"Failed to convert Bandit report to SARIF: {e}")
          PYTHON_SCRIPT
          fi

      - name: Upload SARIF file
        if: always() && github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
          category: bandit

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ matrix.python-version }}
          path: |
            bandit-report.json
            safety-report.json
            bandit.sarif

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## üîí Security Scan Results\n\n';

            try {
              const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              const highIssues = banditReport.metrics._totals.SEVERITY.HIGH || 0;
              const mediumIssues = banditReport.metrics._totals.SEVERITY.MEDIUM || 0;
              const lowIssues = banditReport.metrics._totals.SEVERITY.LOW || 0;

              comment += `### üõ°Ô∏è Bandit Security Linter\n`;
              comment += `- **High severity issues**: ${highIssues} ${highIssues > 0 ? '‚ùå' : '‚úÖ'}\n`;
              comment += `- **Medium severity issues**: ${mediumIssues} ${mediumIssues > 0 ? '‚ö†Ô∏è' : '‚úÖ'}\n`;
              comment += `- **Low severity issues**: ${lowIssues} ${lowIssues > 0 ? '‚ö†Ô∏è' : '‚úÖ'}\n\n`;

              if (highIssues > 0 || mediumIssues > 0) {
                comment += `‚ö†Ô∏è **Action Required**: Please review and fix security issues before merging.\n\n`;
              }
            } catch (e) {
              comment += '### üõ°Ô∏è Bandit Security Linter\n‚ùì Report not available\n\n';
            }

            try {
              const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              const vulnCount = safetyReport.vulnerabilities?.length || 0;
              comment += `### üîç Safety Dependency Scanner\n`;
              comment += `- **Vulnerabilities found**: ${vulnCount} ${vulnCount > 0 ? '‚ùå' : '‚úÖ'}\n\n`;

              if (vulnCount > 0) {
                comment += `‚ö†Ô∏è **Action Required**: Please update vulnerable dependencies before merging.\n\n`;
              }
            } catch (e) {
              comment += '### üîç Safety Dependency Scanner\n‚ùì Report not available\n\n';
            }

            comment += `---\n*Security scan completed for Python ${{ matrix.python-version }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-3.0
          deny-licenses: GPL-2.0, LGPL-2.0, LGPL-2.1

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
