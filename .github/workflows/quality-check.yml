# GitHub Actions workflow for code quality checks
# Generated by Secuority - Python security and quality automation tool

name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13", "3.14"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          # Install project dependencies
          if [ -f "pyproject.toml" ]; then
            # Use uv sync to install all dependencies including optional groups
            uv sync --all-extras || uv sync
          elif [ -f "requirements.txt" ]; then
            # Create virtual environment and install dependencies
            uv venv
            source .venv/bin/activate
            uv pip install -r requirements.txt
            # Install common development tools
            uv pip install ruff mypy pytest pytest-cov
          else
            # Install basic tools for projects without dependency files
            uv venv
            source .venv/bin/activate
            uv pip install ruff mypy pytest pytest-cov
          fi

      - name: Lint with Ruff
        run: |
          # Ruff will use pyproject.toml configuration automatically
          # Stop the build if there are Python syntax errors or undefined names
          uv run ruff check . --output-format=github --select=E9,F63,F7,F82
          # Default set of ruff rules with GitHub Actions annotations
          uv run ruff check . --output-format=github

      - name: Format check with Ruff
        run: |
          # Ruff will use pyproject.toml configuration automatically
          uv run ruff format --check .

      - name: Type check with MyPy
        run: |
          # MyPy will use pyproject.toml configuration automatically
          uv run mypy secuority --show-error-codes --show-error-context

      - name: Test with pytest
        run: |
          # Detect package name from pyproject.toml
          if [ -f "pyproject.toml" ]; then
            PACKAGE_NAME=$(uv run python -c "import tomllib; f=open('pyproject.toml','rb'); data=tomllib.load(f); name=data.get('project',{}).get('name',''); print(name.replace('-','_') if name else 'src')" 2>/dev/null || echo "src")
            # Run tests with detected package
            if [ -d "tests" ]; then
              uv run pytest tests/ --cov="secuority" --cov-report=xml --cov-report=term-missing
            else
              uv run pytest --cov="secuority" --cov-report=xml --cov-report=term-missing
            fi
          else
            # Fallback for projects without pyproject.toml
            if [ -d "tests" ]; then
              uv run pytest tests/ --cov-report=xml --cov-report=term-missing
            else
              uv run pytest --cov-report=xml --cov-report=term-missing
            fi
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: |
          # Detect Python version from pyproject.toml
          if [ -f "pyproject.toml" ]; then
            PYTHON_VERSION=$(uv run python -c "import tomllib; f=open('pyproject.toml','rb'); data=tomllib.load(f); classifiers=data.get('project',{}).get('classifiers',[]); versions=[c.split(' :: ')[-1] for c in classifiers if c.startswith('Programming Language :: Python :: 3.') and c.count('.')==3]; print(sorted(versions)[-1] if versions else '3.13')" 2>/dev/null || echo "3.13")
          else
            PYTHON_VERSION="3.13"
          fi
          echo "Installing Python $PYTHON_VERSION for pre-commit"
          uv python install $PYTHON_VERSION
          uv python pin $PYTHON_VERSION

      - name: Install pre-commit
        run: |
          uv tool install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files

  docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install documentation dependencies
        run: |
          # Only install and build docs if docs directory exists
          if [ ! -d "docs" ]; then
            echo "No docs directory found, skipping documentation build"
            exit 0
          fi

          if [ -f "pyproject.toml" ]; then
            # Check if dependency-groups are defined
            if uv run python -c "import tomllib; f=open('pyproject.toml','rb'); data=tomllib.load(f); exit(0 if 'dependency-groups' in data and 'docs' in data['dependency-groups'] else 1)" 2>/dev/null; then
              uv sync --group docs
            else
              # Fallback to basic sphinx installation
              uv pip install --system sphinx sphinx-rtd-theme
            fi
          else
            uv pip install --system sphinx sphinx-rtd-theme
          fi

      - name: Build documentation
        run: |
          if [ -d "docs" ] && [ -f "docs/Makefile" ]; then
            cd docs
            make html
          else
            echo "No docs directory or Makefile found, skipping documentation build"
          fi

      - name: Deploy to GitHub Pages
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
        continue-on-error: true

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-3.0
